class Solution {
public:
    /**
     * @param n: An integer
     * @param nums: An array
     * @return: the Kth largest element
     */
    int kthLargestElement(int k, vector<int> &nums) {
        if(nums.size() == 0 || k < 1 || k > nums.size()){
            return -1;
        }
        return partition(nums, 0, nums.size() - 1, nums.size() - k);
    }
    
private:
    int partition(vector<int>& nums, int start, int end, int k){
        if(start >= end){
            return nums[k];
        }
        
        int left = start, right = end;
        int pivot = nums[start + (end - start) / 2];
        
        while(left <= right){
            while(left <= right && nums[left] < pivot)
                left++;
            while(left <= right && nums[right] > pivot)
                right--;
            if(left <= right){
                swap(nums[right--], nums[left++]);
            }
        }
        
        if(right >= k && right >= start)
            return partition(nums, start, right, k);
        else if(left <=k && left <= end)
            return partition(nums, left, end, k);
        else
            return nums[k];
    }
};
