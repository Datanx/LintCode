/*
暴力枚举三个数复杂度为O(N^3)
先考虑2Sum的做法，假设升序数列a，对于一组解ai,aj, 另一组解ak,al
必然满足 il 或 i>k j<l, 因此我们可以用两个指针，初始时指向数列两端
指向数之和大于目标值时，右指针向左移使得总和减小，反之左指针向右移
由此可以用 O(N)O(N) 的复杂度解决2Sum问题，3Sum则枚举第一个数 O(N^2)O(N
2
)
使用有序数列的好处是，在枚举和移动指针时值相等的数可以跳过，省去去重部分
*/

class Solution {
public:
    /**
     * @param numbers: Give an array numbers of n integer
     * @return: Find all unique triplets in the array which gives the sum of zero.
     */
    vector<vector<int>> threeSum(vector<int> &nums) {
        vector<vector<int>> result;
        
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size(); i++){
            if(i > 0 && nums[i] == nums[i - 1]){
                continue;
            }
            
            // two sum
            int start = i + 1, end = nums.size() - 1;
            int target = -nums[i];
            while(start < end){
                if(start > i + 1 && nums[start - 1] == nums[start]){
                    start++;
                    continue;
                }
                
                if(nums[start] + nums[end] < target){
                    start++;
                }
                else if(nums[start] + nums[end] > target){
                    end--;
                }
                else{
                    vector<int> triple;
                    triple.push_back(nums[i]);
                    triple.push_back(nums[start]);
                    triple.push_back(nums[end]);
                    result.push_back(triple);
                    start++;
                    end--;
                }
            }
        }
        return result;
    }
};
