public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @param V: Given n items with value V[i]
     * @return: The maximum value
     */
    public int backPackII(int m, int[] A, int[] V) {
        int n = A.length;
        if(n == 0){
            return 0;
        }
        
        int[][] f = new int[n+1][m+1];
        int i, w;
        // initialization
        for(w = 1; w <= m; ++w){
            f[0][w] = -1; // 0 items cannot make positive weight
        }
        
        f[0][0] = 0;
        for(i = 1; i <= n; i++){
            for(w = 0; w <= m; ++w){
                f[i][w] = f[i-1][w];   // case 1: not using A_{i-1}
                if(w >= A[i-1] && f[i-1][w - A[i-1]] != -1){ // case 2: using A_{i-1}
                    f[i][w] = Math.max(f[i][w], f[i-1][w-A[i-1]] + V[i-1]);
                }
            }
        }
        
        int res = 0;
        for(w = 0; w <= m; ++w){
            if(f[n][w] != -1){
                res = Math.max(res, f[n][w]);
            }
        }
        
        return res;
    }
}
